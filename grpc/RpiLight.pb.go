// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc/RpiLight.proto

/*
Package RpiLight is a generated protocol buffer package.

It is generated from these files:
	grpc/RpiLight.proto

It has these top-level messages:
	Empty
	State
	Brightness
	ColorScheme
	RPCError
*/
package RpiLight

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LightState int32

const (
	LightState_OFF     LightState = 0
	LightState_ON      LightState = 1
	LightState_UNKNOWN LightState = 2
)

var LightState_name = map[int32]string{
	0: "OFF",
	1: "ON",
	2: "UNKNOWN",
}
var LightState_value = map[string]int32{
	"OFF":     0,
	"ON":      1,
	"UNKNOWN": 2,
}

func (x LightState) String() string {
	return proto.EnumName(LightState_name, int32(x))
}
func (LightState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type State struct {
	State  LightState   `protobuf:"varint,1,opt,name=State,enum=LightState" json:"State,omitempty"`
	Bright *Brightness  `protobuf:"bytes,2,opt,name=Bright" json:"Bright,omitempty"`
	Colors *ColorScheme `protobuf:"bytes,3,opt,name=Colors" json:"Colors,omitempty"`
}

func (m *State) Reset()                    { *m = State{} }
func (m *State) String() string            { return proto.CompactTextString(m) }
func (*State) ProtoMessage()               {}
func (*State) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *State) GetState() LightState {
	if m != nil {
		return m.State
	}
	return LightState_OFF
}

func (m *State) GetBright() *Brightness {
	if m != nil {
		return m.Bright
	}
	return nil
}

func (m *State) GetColors() *ColorScheme {
	if m != nil {
		return m.Colors
	}
	return nil
}

type Brightness struct {
	Value int32 `protobuf:"varint,1,opt,name=Value" json:"Value,omitempty"`
}

func (m *Brightness) Reset()                    { *m = Brightness{} }
func (m *Brightness) String() string            { return proto.CompactTextString(m) }
func (*Brightness) ProtoMessage()               {}
func (*Brightness) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Brightness) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type ColorScheme struct {
	Red   int32 `protobuf:"varint,1,opt,name=Red" json:"Red,omitempty"`
	Blue  int32 `protobuf:"varint,2,opt,name=Blue" json:"Blue,omitempty"`
	Green int32 `protobuf:"varint,3,opt,name=Green" json:"Green,omitempty"`
}

func (m *ColorScheme) Reset()                    { *m = ColorScheme{} }
func (m *ColorScheme) String() string            { return proto.CompactTextString(m) }
func (*ColorScheme) ProtoMessage()               {}
func (*ColorScheme) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ColorScheme) GetRed() int32 {
	if m != nil {
		return m.Red
	}
	return 0
}

func (m *ColorScheme) GetBlue() int32 {
	if m != nil {
		return m.Blue
	}
	return 0
}

func (m *ColorScheme) GetGreen() int32 {
	if m != nil {
		return m.Green
	}
	return 0
}

type RPCError struct {
	Num     int32  `protobuf:"varint,1,opt,name=Num" json:"Num,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message" json:"Message,omitempty"`
}

func (m *RPCError) Reset()                    { *m = RPCError{} }
func (m *RPCError) String() string            { return proto.CompactTextString(m) }
func (*RPCError) ProtoMessage()               {}
func (*RPCError) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *RPCError) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *RPCError) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*Empty)(nil), "Empty")
	proto.RegisterType((*State)(nil), "State")
	proto.RegisterType((*Brightness)(nil), "Brightness")
	proto.RegisterType((*ColorScheme)(nil), "ColorScheme")
	proto.RegisterType((*RPCError)(nil), "RPCError")
	proto.RegisterEnum("LightState", LightState_name, LightState_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RpiLight service

type RpiLightClient interface {
	On(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RPCError, error)
	Off(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RPCError, error)
	GetInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*State, error)
	SetColor(ctx context.Context, in *State, opts ...grpc.CallOption) (*RPCError, error)
	SetBrightness(ctx context.Context, in *Brightness, opts ...grpc.CallOption) (*RPCError, error)
}

type rpiLightClient struct {
	cc *grpc.ClientConn
}

func NewRpiLightClient(cc *grpc.ClientConn) RpiLightClient {
	return &rpiLightClient{cc}
}

func (c *rpiLightClient) On(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RPCError, error) {
	out := new(RPCError)
	err := grpc.Invoke(ctx, "/RpiLight/On", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpiLightClient) Off(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RPCError, error) {
	out := new(RPCError)
	err := grpc.Invoke(ctx, "/RpiLight/Off", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpiLightClient) GetInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*State, error) {
	out := new(State)
	err := grpc.Invoke(ctx, "/RpiLight/GetInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpiLightClient) SetColor(ctx context.Context, in *State, opts ...grpc.CallOption) (*RPCError, error) {
	out := new(RPCError)
	err := grpc.Invoke(ctx, "/RpiLight/SetColor", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpiLightClient) SetBrightness(ctx context.Context, in *Brightness, opts ...grpc.CallOption) (*RPCError, error) {
	out := new(RPCError)
	err := grpc.Invoke(ctx, "/RpiLight/SetBrightness", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RpiLight service

type RpiLightServer interface {
	On(context.Context, *Empty) (*RPCError, error)
	Off(context.Context, *Empty) (*RPCError, error)
	GetInfo(context.Context, *Empty) (*State, error)
	SetColor(context.Context, *State) (*RPCError, error)
	SetBrightness(context.Context, *Brightness) (*RPCError, error)
}

func RegisterRpiLightServer(s *grpc.Server, srv RpiLightServer) {
	s.RegisterService(&_RpiLight_serviceDesc, srv)
}

func _RpiLight_On_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpiLightServer).On(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RpiLight/On",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpiLightServer).On(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpiLight_Off_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpiLightServer).Off(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RpiLight/Off",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpiLightServer).Off(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpiLight_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpiLightServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RpiLight/GetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpiLightServer).GetInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpiLight_SetColor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(State)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpiLightServer).SetColor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RpiLight/SetColor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpiLightServer).SetColor(ctx, req.(*State))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpiLight_SetBrightness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Brightness)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpiLightServer).SetBrightness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RpiLight/SetBrightness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpiLightServer).SetBrightness(ctx, req.(*Brightness))
	}
	return interceptor(ctx, in, info, handler)
}

var _RpiLight_serviceDesc = grpc.ServiceDesc{
	ServiceName: "RpiLight",
	HandlerType: (*RpiLightServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "On",
			Handler:    _RpiLight_On_Handler,
		},
		{
			MethodName: "Off",
			Handler:    _RpiLight_Off_Handler,
		},
		{
			MethodName: "GetInfo",
			Handler:    _RpiLight_GetInfo_Handler,
		},
		{
			MethodName: "SetColor",
			Handler:    _RpiLight_SetColor_Handler,
		},
		{
			MethodName: "SetBrightness",
			Handler:    _RpiLight_SetBrightness_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/RpiLight.proto",
}

func init() { proto.RegisterFile("grpc/RpiLight.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 333 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x52, 0xcb, 0x4e, 0xc2, 0x40,
	0x14, 0xa5, 0xad, 0x6d, 0xe1, 0x56, 0x4d, 0x73, 0x75, 0x51, 0x71, 0x21, 0x8e, 0x2e, 0x90, 0xc5,
	0x98, 0x60, 0xe2, 0x07, 0x40, 0x80, 0x10, 0xb5, 0x35, 0xd3, 0xa8, 0x6b, 0xc4, 0xe1, 0x91, 0xd0,
	0x47, 0xa6, 0xd3, 0x85, 0xbf, 0xe4, 0x57, 0x9a, 0x4e, 0x5b, 0x29, 0x89, 0xbb, 0x7b, 0xee, 0x3d,
	0x8f, 0xe4, 0xcc, 0xc0, 0xd9, 0x5a, 0xa4, 0xcb, 0x7b, 0x96, 0x6e, 0x9f, 0xb7, 0xeb, 0x8d, 0xa4,
	0xa9, 0x48, 0x64, 0x42, 0x6c, 0x30, 0x27, 0x51, 0x2a, 0xbf, 0x49, 0x0e, 0x66, 0x28, 0x17, 0x92,
	0xe3, 0x75, 0x35, 0x78, 0x5a, 0x4f, 0xeb, 0x9f, 0x0e, 0x1d, 0xaa, 0xe8, 0x6a, 0xc5, 0x2a, 0xca,
	0x0d, 0x58, 0x23, 0x51, 0x6c, 0x3d, 0xbd, 0xa7, 0xf5, 0x9d, 0xa1, 0x43, 0x4b, 0x18, 0xf3, 0x2c,
	0x63, 0xd5, 0x09, 0x6f, 0xc1, 0x1a, 0x27, 0xbb, 0x44, 0x64, 0x9e, 0xa1, 0x48, 0xc7, 0x54, 0xc1,
	0x70, 0xb9, 0xe1, 0x11, 0x67, 0xd5, 0x8d, 0x10, 0x80, 0xbd, 0x16, 0xcf, 0xc1, 0x7c, 0x5f, 0xec,
	0xf2, 0x32, 0xdb, 0x64, 0x25, 0x20, 0x73, 0x70, 0x1a, 0x52, 0x74, 0xc1, 0x60, 0xfc, 0xab, 0xa2,
	0x14, 0x23, 0x22, 0x1c, 0x8d, 0x0a, 0x95, 0xae, 0x56, 0x6a, 0x2e, 0xac, 0x66, 0x82, 0xf3, 0x58,
	0xa5, 0x9b, 0xac, 0x04, 0xe4, 0x11, 0xda, 0xec, 0x75, 0x3c, 0x11, 0x22, 0x11, 0x85, 0x8f, 0x9f,
	0x47, 0xb5, 0x8f, 0x9f, 0x47, 0xe8, 0x81, 0xfd, 0xc2, 0xb3, 0x6c, 0xb1, 0x2e, 0xad, 0x3a, 0xac,
	0x86, 0x83, 0x01, 0xc0, 0xbe, 0x06, 0xb4, 0xc1, 0x08, 0xa6, 0x53, 0xb7, 0x85, 0x16, 0xe8, 0x81,
	0xef, 0x6a, 0xe8, 0x80, 0xfd, 0xe6, 0x3f, 0xf9, 0xc1, 0x87, 0xef, 0xea, 0xc3, 0x1f, 0x0d, 0xda,
	0x75, 0xcb, 0x78, 0x01, 0x7a, 0x10, 0xa3, 0x45, 0x55, 0xc9, 0xdd, 0x0e, 0xad, 0xd3, 0x49, 0x0b,
	0xbb, 0x60, 0x04, 0xab, 0xd5, 0xff, 0xb7, 0x4b, 0xb0, 0x67, 0x5c, 0xce, 0xe3, 0x55, 0xf2, 0x77,
	0xb7, 0xa8, 0x0a, 0x27, 0x2d, 0xbc, 0x82, 0x76, 0xc8, 0xa5, 0xaa, 0x04, 0xab, 0xed, 0xa1, 0xfa,
	0x0e, 0x4e, 0x42, 0x2e, 0x1b, 0xbd, 0x36, 0x1f, 0xe8, 0x80, 0xfa, 0x69, 0xa9, 0x6f, 0xf0, 0xf0,
	0x1b, 0x00, 0x00, 0xff, 0xff, 0x46, 0x24, 0x74, 0xc2, 0x1d, 0x02, 0x00, 0x00,
}
